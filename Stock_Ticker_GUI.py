#! /usr/bin/env python
#  -*- coding: utf-8 -*-
# Stock_Ticker_V2..py
# GUI module generated by PAGE version 6.0
#  in conjunction with Tcl version 8.6
#    Jan 04, 2021 10:45:42 PM MST  platform: Linux

import datetime
from db_data import *
# from ST_classes_V2 import *  # Leave this as it is working and we can always come back to it
from ST_classes_MAIN import *

import tkinter as tk
# from tkinter import ttk
from tkinter import messagebox
from tkinter import simpledialog

import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

from configparser import ConfigParser

class Frames():
    def __init__(self):
        # Read config.ini file
        config_object = ConfigParser()
        config_object.read("ST_config.ini")

#         plt.style.use('fivethirtyeight')
        self.current_player = ""
        self.current_stock = ""
        self.amount = 0
        player_active = "disabled"
        self.common_stock = [("amzn", "Amazon.com, Inc."),
                             ("goog", "Alphabet Inc Class C"),
                             ("aapl", "Apple Inc"),
                             ("tsla", "Tesla Inc"),
                             ("coke", "Coca-Cola Consolidated Inc"),
                             ("ba", "Boeing Co"),
                             ("su", "Suncor Energy Inc."),
                             ("f", "Ford"),
                             ("msft", "Microsoft"),
                             ("mar", "Marriott International"),
                             ("nflx", "Netflix Inc"),
                             ("ac", "Air Canada"),
                             ("fb", "Facebook, Inc. Common Stock"),
                             ("zm", "Zoom Video Com")
                             ]
        self._bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        self._fgcolor = '#000000'  # X11 color: 'black'
        self._compcolor = '#d9d9d9'  # X11 color: 'gray85'
        self._ana1color = '#d9d9d9'  # X11 color: 'gray85'
        self._ana2color = '#ececec'  # Closest X11 color: 'gray92'

        colour = config_object["COLOURS"]
        self._frame_color = colour["frame_color"]
        self._message_color = colour["message_color"]
        self._canvas_color = colour["canvas_color"]
        self._root_color = colour["root_color"]
        
    def buy_stock(self, window):
        self.current_player.transaction_amount = int(self.stock_to_sell_entry.get())
        self.current_player.transaction_symbol = self.current_stock.symbol
        self.current_player.purchase_shares ()
        window.destroy()
#         message_var.set("")
        self.current_stock = ""
        try:
            self.graph_canvas.get_tk_widget().destroy()
        except Exception as e:
            pass
    
        balance_string = self.current_player.balance_str()
#         player_name_var.set(self.current_player.name + ' ('+balance_string+')')
#         name_l.configure(textvariable=player_name_var).pack()

    def buyFrame(self):
        self.newwin = tk.Toplevel(game_board)
        self.newwin.geometry("400x340+460+193")
        self.newwin.minsize(1, 1)
        self.newwin.maxsize(1000, 800)
        self.newwin.resizable(1, 1)
        self.newwin.title("BUY")
        self.newwin.configure(relief="raised")
        self.newwin.configure(background=self._root_color)
        self.newwin.configure(highlightcolor="black")
        
        self.Frame_Top = tk.Frame(self.newwin)
        self.Frame_Top.place(x=10, y=10, height=40, width=380)
        self.Frame_Top.configure(relief='groove')
        self.Frame_Top.configure(borderwidth="2")
        self.Frame_Top.configure(background=self._frame_color)

        self.name_l = tk.Label(self.Frame_Top)
        self.name_l.place(relx=0.027, rely=0.25, height=21, width=178)
        self.name_l.configure(activebackground="#f9f9f9")
        self.name_l.configure(background=self._frame_color)
        self.name_l.configure(font="-family {DejaVu Sans} -size 14 -weight bold")
        self.name_l.configure(foreground=self._message_color)
        self.name_l.configure(text=str(self.current_player.name))

        self.Stock_l = tk.Label(self.Frame_Top)
        self.Stock_l.place(relx=0.527, rely=0.25, height=21, width=158)
        self.Stock_l.configure(activebackground="#f9f9f9")
        self.Stock_l.configure(background=self._frame_color)
        self.Stock_l.configure(
            font="-family {DejaVu Sans} -size 14 -weight bold")
        self.Stock_l.configure(foreground=self._message_color)
        self.Stock_l.configure(text=self.current_stock.symbol)
        
        self.frame_main = tk.Frame(self.newwin)
        self.frame_main.place(x=10, y=60, height=270, width=380)
        self.frame_main.configure(background=self._frame_color)
        self.frame_main.configure(relief='groove')
        self.frame_main.configure(borderwidth="2")

        self.current_price_l = tk.Label(self.frame_main)
        self.current_price_l.place(x=20, y=20, height=40, width=150)
        self.current_price_l.configure(font="-family {DejaVu Sans} -size 12")
        self.current_price_l.configure(bg=self._frame_color, fg=self._message_color)
        self.current_price_l.configure(text='''Player balance''')

        self.current_price = tk.Label(self.frame_main)
        self.current_price.place(x=20, y=60, height=40, width=150)
        self.current_price.configure(
            font="-family {DejaVu Sans} -size 12 -weight bold")
        self.current_price.configure(bg=self._frame_color, fg=self._message_color)
        self.current_price.configure(text=str("${:,.2f}".format(self.current_player.balance)))

        self.player_balance_l = tk.Label(self.frame_main)
        self.player_balance_l.place(x=210, y=20, height=40, width=150)
        self.player_balance_l.configure(font="-family {DejaVu Sans} -size 12")
        self.player_balance_l.configure(
            bg=self._frame_color, fg=self._message_color)
        self.player_balance_l.configure(text='''Current price''')

        self.player_balance = tk.Label(self.frame_main)
        self.player_balance.place(x=210, y=60, height=40, width=150)
        self.player_balance.configure(
            font="-family {DejaVu Sans} -size 12 -weight bold")
        self.player_balance.configure(bg=self._frame_color, fg=self._message_color)
        self.player_balance.configure(text=str("${:,.2f}".format(self.current_stock.current_price())))

        self.max_stock_l = tk.Label(self.frame_main)
        self.max_stock_l.place(x=20, y=120, height=40, width=150)
        self.max_stock_l.configure(font="-family {DejaVu Sans} -size 12")
        self.max_stock_l.configure(bg=self._frame_color, fg=self._message_color)
        self.max_stock_l.configure(text='''Max purchase''')

        self.max_stock = tk.Label(self.frame_main)
        self.max_stock.place(x=20, y=160, height=40, width=150)
        self.max_stock.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.max_stock.configure(bg=self._frame_color, fg=self._message_color)
        self.max_stock_value = int(
            (self.current_player.balance
             /self.current_stock.current_price()))
        self.max_stock.configure(text=self.max_stock_value)

        self.stock_to_sell_l = tk.Label(self.frame_main)
        self.stock_to_sell_l.place(x=210, y=120, height=40, width=150)
        self.stock_to_sell_l.configure(font="-family {DejaVu Sans} -size 12")
        self.stock_to_sell_l.configure(bg=self._frame_color, fg=self._message_color)
        self.stock_to_sell_l.configure(text='''Stock to buy''')

        self.stock_to_sell_entry = tk.Entry(self.frame_main)
        self.stock_to_sell_entry.place(x=235, y=170, height=30, width=100)
        self.stock_to_sell_entry.configure(background="white")
        self.stock_to_sell_entry.configure(font="TkFixedFont")
        self.stock_to_sell_entry.configure(selectbackground="blue")
        self.stock_to_sell_entry.configure(selectforeground="white")

        self.cancel_button = tk.Button(self.frame_main)
        self.cancel_button.place(x=60, y=220, height=30, width=70)
        self.cancel_button.configure(font="-family {DejaVu Sans} -size 10")
        self.cancel_button.configure(command=self.newwin.destroy)
        self.cancel_button.configure(text='''cancel''')

        self.buy_button = tk.Button(self.frame_main)
        self.buy_button.place(x=250, y=220, height=30, width=70)
        self.buy_button.configure(font="-family {DejaVu Sans} -size 10")
        self.buy_button.configure(command=lambda: self.buy_stock(self.newwin))
        self.buy_button.configure(text='''Buy''')

#+++++++++++++++++++==============================
    def gameFrame(self, app):
                   
        def make_working_frame():
            try:
                WorkFrame.destroy()
            except Exception as e:
                pass
            WorkFrame = tk.Frame(MainFrame) 
            WorkFrame.place(x=10, y=10, height=510, width=760)
            WorkFrame.configure(relief='groove')
            WorkFrame.configure(borderwidth="2")
            WorkFrame.configure(background=self._frame_color)
            return (WorkFrame)
        
        def clicked():
            messagebox.showinfo('Stock Ticker 2.0', 'This is a message box')

        def destroy_window():    # Function which closes the window.
            app.destroy()

        def selected_player(player_name):
            self.current_player = Player(player_name)
            player_name_var.set(self.current_player.name_balance_str())
            player_active = "normal"
            sub_menu_player.entryconfig(4, state=player_active)
            sub_menu_player.entryconfig(5, state=player_active)
            sub_menu_player.entryconfig(6, state=player_active)
            sub_menu_stock.entryconfig(2, state=player_active)
        
            if player_active == "normal":
                portfolio_log = self.current_player.load_portfolio()
                for s in portfolio_log:
                    name_string = (s[1] + " -" + str(s[3]))
                    sub_menu_stock_sell.add_radiobutton(
                        command=lambda s=s: sell_stock(self.current_player,s), label=name_string)
 
        def make_new_player():
            answer = simpledialog.askstring("NEW PLAYER",
                                            "What is the new players name?",
                                            parent=app)
            if answer is not None:
                new_player = Player(answer)
                new_player.create_player_in_db()
                self.current_player = new_player
                selected_player(self.current_player.name)
                sub_menu_player_sub.delete(0,len(player_list())-1)
                lop = player_list()
                
                for p in lop[1:]:
                    sub_menu_player_sub.add_radiobutton(
                        command=lambda p=p: selected_player(p), label=p)
            else:
                pass

        def graph(symbol):
            WorkingFrame = make_working_frame()
            stock = Stock(symbol)
            self.current_stock = stock

            message_var.set(
                str(self.current_stock.full_name()) + " (" + symbol + " )")
            figure1 = plt.figure(figsize=(12.5, 8))
            # adding the subplot
            plot1 = figure1.add_subplot(111)
            self.canvas = FigureCanvasTkAgg(figure1, WorkingFrame)
            self.canvas.get_tk_widget().pack()
            plt.plot(stock.price_history(300)['adjclose'], label=symbol)
            plt.title('Adj. Close Price History')
            plt.xlabel('Date')
            plt.ylabel('Adj. Close Price (USD)')
            plt.legend(loc='upper left')
            plot1.set_title('Stock history of ' +
                            str(stock.full_name()) +
                            " with a closing price of " +
                            str("${:,.2f}".format(stock.current_price())))
            return

        def search_stock():
            answer = simpledialog.askstring("NEW STOCK", "What is the stock symbol?", parent=app)
            if answer is not None:
                stock = Stock(answer)
                graph (stock.symbol)

        def sell_stock(cur_player, what_to_sell):
            stock_to_sell = Stock(what_to_sell[1])
            quest_str = ("How many " + what_to_sell[1] + " do you want to sell (max " + str(what_to_sell[3]) + ") ?")
            answer = simpledialog.askinteger("SELL STOCK", quest_str, parent=app,
                                             minvalue=0, maxvalue=int(what_to_sell[3]))
            if answer is not None:

                print ('stock_to_sell is {}'.format( stock_to_sell.symbol ))
                print ('answer is {}'.format( answer ))
                cur_player.transaction_symbol = stock_to_sell.symbol
                cur_player.transaction_amount = answer
                cur_player.sell_shares ()
            else:
                messagebox.showinfo('Stock Ticker 2.0', 'Try again')
                    
            return        
  
        def p_and_l():
            space_width = 10; message_width = 20; all_height = 10
            WorkingFrame = make_working_frame()
                
            player_info = config_object["PLAYERS"]
            initial_balance = int(player_info ["initial"])
            
            port_int = self.current_player.calculate_networth() - self.current_player.balance
            balance_int = self.current_player.balance
            prof_int = port_int + balance_int - initial_balance
            port_value = Player.money_str(port_int)
            balance = self.current_player.balance_str()
            net_worth = Player.money_str(port_int + balance_int)
            profit = Player.money_str(prof_int)
            
            e = tk.Entry(WorkingFrame, width=space_width, relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, bg=self._frame_color)
            e.grid(column=1, row=0)
            e.grid(column=1, row=1)
            e = tk.Entry(WorkingFrame, width=space_width, relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, bg=self._frame_color)
            e.grid(column=1, row=2)
            e = tk.Entry(WorkingFrame, width=space_width, relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, bg=self._frame_color)
            
            e = tk.Entry(WorkingFrame,
                        width=40,relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, 
                        bg=self._frame_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 14 -weight bold",
                        justify='center')
            e.insert(tk.END, "Net Worth")
            e.grid(column=2, row=0, columnspan=3)
            
            e = tk.Entry(WorkingFrame,
                        width=message_width,relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, 
                        bg=self._frame_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 12 -weight bold",
                        justify='center')
            e.insert(tk.END, "Portfolio Value")
            e.grid(column=2, row=2)
            
            e = tk.Entry(WorkingFrame, width=space_width, relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, bg=self._frame_color)
            e.grid(column=3, row=2)
            
            e = tk.Entry(WorkingFrame,
                        width=message_width,relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, 
                        bg=self._frame_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 12 -weight bold",
                        justify='center')
            e.insert(tk.END, port_value)
            e.grid(column=2, row=3)
             
            e = tk.Entry(WorkingFrame,
                        width=message_width,relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, 
                        bg=self._frame_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 12 -weight bold",
                        justify='center')
            e.insert(tk.END, "Cash on hand")
            e.grid(column=4, row=2)
            
            e = tk.Entry(WorkingFrame,
                        width=message_width,relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, 
                        bg=self._frame_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 12 -weight bold",
                        justify='center')
            e.insert(tk.END, balance)
            e.grid(column=4, row=3)
            
            e = tk.Entry(WorkingFrame, width=space_width, relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, bg=self._frame_color)
            e.grid(column=1, row=4)
            
            e = tk.Entry(WorkingFrame,
                        width=message_width,relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, 
                        bg=self._frame_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 12 -weight bold",
                        justify='center')
            e.insert(tk.END, "Networth")
            e.grid(column=2, row=5)
            
            e = tk.Entry(WorkingFrame,
                        width=message_width,relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, 
                        bg=self._frame_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 12 -weight bold",
                        justify='center')
            e.insert(tk.END, net_worth)
            e.grid(column=2, row=6)
            
            e = tk.Entry(WorkingFrame,
                        width=message_width,relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, 
                        bg=self._frame_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 12 -weight bold",
                        justify='center')
            e.insert(tk.END, "Profit & Loss")
            e.grid(column=4, row=5)
            
            e = tk.Entry(WorkingFrame,
                        width=message_width,relief="flat", borderwidth = 0,
                         highlightbackground=self._frame_color, 
                        bg=self._frame_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 12 -weight bold",
                        justify='center')
            e.insert(tk.END, profit)
            e.grid(column=4, row=6)
            
        def ledger_table():
            if self.current_player == "":
                return
            ledger_log = self.current_player.load_ledger()
            WorkingFrame = make_working_frame()

            message_var.set("")
            columns = ["Date", "Stock", "Price", "Quantity", "Action"]
            size = [27, 13, 12, 11, 10]
            for x, c in enumerate(columns):
                e = tk.Entry(WorkingFrame,
                        width=size[x],
                        bg=self._root_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 12", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, c)
                e.grid(column=x, row=0)
            for y, log in enumerate(ledger_log):
                if (y % 2) == 0:
                    bgc= self._frame_color
                else:
                    bgc= self._root_color
                dt = datetime.datetime.fromtimestamp(log[5])
#                 dt = self.current_player.timestamp_str_from_e (log[5])
                e = tk.Entry(WorkingFrame,
                          width=size[0],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 12", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, str(dt.strftime("%a, %e %b %Y - %l:%M %p")))
#                 e.insert(tk.END, dt)
                e.grid(column=0, row=y+1)

                e = tk.Entry(WorkingFrame,
                          width=size[1],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 12", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, str(log[1]))
                e.grid(column=1, row=y+1)

                e = tk.Entry(WorkingFrame,
                          width=size[2],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 12", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, str("${:,.2f}".format(log[2])))
                e.grid(column=2, row=y+1)

                e = tk.Entry(WorkingFrame,
                          width=size[3],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 12", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, str(int(log[3])))
                e.grid(column=3, row=y+1)

                e = tk.Entry(WorkingFrame,
                          width=size[4],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 12", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, log[6])
                e.grid(column=4, row=y+1)
            return

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++============           
        def portfolio_table():
            if self.current_player == "":
                return
            portfolio_log = self.current_player.load_portfolio()
            WorkingFrame = make_working_frame()

            message_var.set("")
            columns = ["Stock", "Purchase price", "Quantity", "Current price", "Value", "P&L"]
            size = [10,15,11,18,13,13]
            for x, c in enumerate(columns):
                e = tk.Entry(WorkingFrame,
                        width=size[x],
                        bg=self._root_color,
                        fg=self._message_color,
                        font="-family {DejaVu Sans} -size 11", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, c)
                e.grid(column=x, row=0)
            port_value = 0; pl = 0
            
            for y, log in enumerate(portfolio_log):
                if (y % 2) == 0:
                    bgc= self._frame_color
                else:
                    bgc= self._root_color
                total_rows = y
                purch_price = log[4]
                quan = log[3]
                price = Stock(str(log[1])).current_price()                
                value = quan * price
                
                pandl = value - (quan * purch_price)
                port_value = port_value + value
                pl = pl + pandl

                e = tk.Entry(WorkingFrame, #stock
                          width=size[0],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 11", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, str(log[1]))
                e.grid(column=0, row=y+1)
                
                e = tk.Entry(WorkingFrame, #purchase
                          width=size[1],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 11", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, str("${:,.2f}".format(purch_price)))
                e.grid(column=1, row=y+1)

                e = tk.Entry(WorkingFrame, #quanitity
                          width=size[2],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 11", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, str(quan))
                e.grid(column=2, row=y+1)
                
                e = tk.Entry(WorkingFrame, #price
                          width=size[3],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 11", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, str("${:,.2f}".format(price)))
                e.grid(column=3, row=y+1)
                
                e = tk.Entry(WorkingFrame, #value
                          width=size[4],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 11", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, str("${:,.2f}".format(value)))
                e.grid(column=4, row=y+1)
                
                e = tk.Entry(WorkingFrame, #P&L
                          width=size[5],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 11", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
                e.insert(tk.END, str("${:,.2f}".format(pandl)))
                e.grid(column=5, row=y+1)
            #=========================
            bgc= self._frame_color    
            e = tk.Entry(WorkingFrame, #Net worth start
                      width=size[3],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 11", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
            e.insert(tk.END, str("PORTFOLIO VALUE"))
            e.grid(column=3, row=total_rows+2)
                
            e = tk.Entry(WorkingFrame, #Net worth current
                      width=size[4],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 11", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
            e.insert(tk.END, str("${:,.2f}".format(port_value)))
            e.grid(column=4, row=total_rows+2)
                
            e = tk.Entry(WorkingFrame, #total P&L
                      width=size[5],
                          bg=bgc,
                          fg=self._message_color,
                          font="-family {DejaVu Sans} -size 11", relief="flat", borderwidth = 0,
                             highlightbackground=self._frame_color, justify='center')
            e.insert(tk.END, str("${:,.2f}".format(pl)))
            e.grid(column=5, row=total_rows+2)

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++============
        player_name_var = tk.StringVar()
        message_var = tk.StringVar()
        can_buy = "disabled"

        app.geometry("800x600+276+63")
        app.minsize(800, 600)
        app.maxsize(1000, 750)
        app.resizable(1, 1)
        app.title("Stock Ticker 2.0")
        app.configure(background=self._root_color)
        app.configure(highlightcolor="black")

        menubar = tk.Menu(app, font="TkMenuFont",
                          bg=self._bgcolor, fg=self._fgcolor)
        app.configure(menu=menubar)

        sub_menu_file = tk.Menu(app, tearoff=0)
        menubar.add_cascade(menu=sub_menu_file, label="File")
        sub_menu_file.add_command(command=clicked, label="Message box")
        sub_menu_file.add_command(command=destroy_window, label="Quit")

        sub_menu_player = tk.Menu(app, tearoff=0)
        menubar.add_cascade(menu=sub_menu_player, label="Players")
        sub_menu_player_sub = tk.Menu(app, tearoff=0)

        sub_menu_player.add_cascade(
            menu=sub_menu_player_sub, label="Switch player")
        lop = player_list()
        for p in lop[1:]:
            sub_menu_player_sub.add_radiobutton(
                command=lambda p=p: selected_player(p), label=p)
            
        if self.current_player == "":
            player_active = "disabled"
        else:
            player_active = "normal"
        sub_menu_player.add_command(command = make_new_player, label="New Player")
        sub_menu_player.add_command(state=player_active, label="Remove player")
        sub_menu_player.add_separator()
        sub_menu_player.add_command(state=player_active, command = portfolio_table, label="Portfolio")
        sub_menu_player.add_command(state=player_active, command = ledger_table, label="Ledger")
        sub_menu_player.add_command(state=player_active, command = p_and_l, label="Net worth")

        sub_menu_stock = tk.Menu(app, tearoff=0)
        menubar.add_cascade(menu=sub_menu_stock, label="Stocks")
        sub_menu_stock.add_command(command=search_stock, label="Search")
        sub_menu_stock.add_command(command=self.buyFrame, label="Buy")
        sub_menu_stock_sell = tk.Menu(app, tearoff=0)
        sub_menu_stock.add_cascade(menu=sub_menu_stock_sell, state=player_active, label="Sell")

        sub_menu_stock.add_command(label="History")
        sub_menu_stock_comm = tk.Menu(app, tearoff=0)
        sub_menu_stock.add_cascade(menu=sub_menu_stock_comm, label="Common")
        for s in self.common_stock:
            name_string = (s[0]+"  ( "+s[1]+" )")
            sub_menu_stock_comm.add_radiobutton(
                command=lambda s=s: graph(s[0]), label=name_string)

        MainFrame = tk.Frame(app) # - the often killed working frame will be in this one.
        MainFrame.place(x=10, y=10, height=530, width=780)
        MainFrame.configure(relief='groove')
        MainFrame.configure(borderwidth="2")
        MainFrame.configure(background=self._frame_color)

        Frame_message = tk.Frame(app)
        Frame_message.place(x=10, y=550, height=40, width=780)
        Frame_message.configure(relief='groove')
        Frame_message.configure(borderwidth="2")
        Frame_message.configure(relief="groove")
        Frame_message.configure(background=self._frame_color)

        name_l = tk.Label(Frame_message)
        name_l.place(x=5, y=5, height=30, width=200)
        name_l.configure(activebackground="#f9f9f9")
        name_l.configure(background=self._frame_color)
        name_l.configure(foreground=self._message_color)
        name_l.configure(anchor="w")
        name_l.configure(textvariable=player_name_var)

        message_l = tk.Label(Frame_message)
        message_l.place(x=210, y=5, height=30, width=360)
        message_l.configure(activebackground="#f9f9f9")
        message_l.configure(background=self._frame_color)
        message_l.configure(foreground=self._message_color)
        message_l.configure(textvariable=message_var)

        date_time = tk.Label(Frame_message)
        date_time.place(x=580, y=5, height=30, width=190)
        date_time.configure(activebackground="#f9f9f9")
        date_time.configure(background=self._frame_color)
        date_time.configure(foreground=self._message_color)
        date_time.configure(anchor="e")
        date_time.configure(text=datetime.datetime.today().strftime(
            "%a, %e %b %Y - %l:%M %p"))

game_board = tk.Tk()
app = Frames()
app.gameFrame(game_board)
game_board.mainloop()
